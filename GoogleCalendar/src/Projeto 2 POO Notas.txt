Office Calendar




### Descrição


Cada utilizador tem acesso ao calendário onde podem colocar eventos

Os utilizadores podem convidar outros utilizadores registados no website para participar nestes eventos

Os eventos incluem detalhes como:
	-> o criador
	-> data
	-> hora
	-> nivel de prioridade
	-> topico do evento

Vários eventos podem se sobrepor no tempo.

Há três tipos de contas: Staff, Manager e Guest (externos)
	-> Staff pode criar e convidar guests para eventos (até prioridade média)
	-> Guests apenas podem aceitar ou rejeitar convites
	-> Managers podem fazer tudo o que o Staff pode e ainda criar eventos de alta prioridade

As contas de Staff aceitam automaticamente quaisquer convites de Alta prioridade mesmo que entrem em conflito com eventos existentes. Managers podem rejeitar convites de Alta prioridade

A guest list especifica a resposta de cada participante ao convite. Ou seja, se já aceitou, rejeitou ou ainda não respondeu. O criador é automaticamente listado como "aceitou" o convite.

Os eventos são identificados de forma única pelo seu nome e a conta do criador.

Todos os eventos têm uma duração fixa de 1h de modo a facilitar conflitos de horário.







### Comandos


Em caso de comando desconhecido
"Unknown command <COMMAND>."

Todos os comandos são case insensitive e não têm espaços brancos

Se houver vários tokens na mesma linha (ex: "someRandom Command") o programa deverá retornar duas mensagens de comando desconhecido, uma para cada token.

Argumentos do tipo String são case sentitive




## exit

imprime apenas
"Bye!"







## help


imprime:

Available commands:
register - registers a new account
accounts - lists all registered accounts
create - creates a new event
events - lists all events of an account
invite - invites an user to an event
response - response to an invitation
event - shows detailed information of an event
topics - shows all events that cover a list of topics
help - shows the available commands
exit - terminates the execution of the program







## register

regista uma nova conta
recebe como argumento o email do utilizador e o tipo de conta (staff, guest, manager)
Condição: Não haver conta com o mesmo email
"<account name> was registered."

erros:
Conta já existe -> "<account name> already exists."
O tipo de conta é desconhecido -> "Unknown account type."






## accounts

lista todas as contas registadas

Se não houver contas registadas -> "No accounts registered."

Caso contrário, lista de forma alfabética (ordenado pelo nome):

All accounts:
<account name> [<account type>].
<account name> [<account type>].
<account name> [<account type>].
<account name> [<account type>].
<account name> [<account type>].






## create

cria um evento

recebe como argumentos: <account name> <event name> <prioridade (mid/high)> <day> <time> <topics>
day -> YYYY MM DD
time -> HH
topicos -> palavras separadas por espaços, há pelo menos 1 palavra

se for bem sucedido o evento é criado
"<event name> is scheduled."

o criador é automaticamente adicionado à lista do que já aceitaram o evento


Erros:

1. a conta criadora não existe -> "Account <account name> does not exist."
2. a prioridade do evento é desconhecida -> "Unknown priority type."
3. a conta tipo guest não pode criar eventos -> "Guest account <account name> cannot create new events."
4. a conta tipo staff não pode criar eventos de high priority -> "Account <account name> cannot create high priority events."
5. um evento com <event name> já existe em <account name> -> "<event name> already exists in account <account name>."
6. A conta criadora já aceitou outro evento ao mesmo tempo -> "Account <account name> is busy."








## events

lista todos os eventos de uma conta, ou seja, os criados pelo utilizador e os outros para os quais foi convidado.

Recebe como argumento <account name>

Se não criou ou foi convidado para nada -> "Account <account name> has no events."

Caso contrário imprime (por ordem de aceitação de convites):

Account <account name> events:
<event name> status [invited <number of invitations>] [accepted <number of accepted invitations>] [rejected <number of rejected invitations>] [unanswered <number of unanswered invitations>].



Erros:
1. A conta com o nome <account name> não existe -> "Account <account name> does not exist."







## invite


Convida um utillizador para o evento

Argumentos: <conta a convidar> <conta do criador> <nome do evento>

Em caso de sucesso pode ocorrer vários feedbacks:

1. Em caso de o convite dizer registo a um utilizador staff e um evento de alta prioridade então é escrito:
	"<guest name> accepted the invitation."


e uma das seguintes alternativas:


A) Se o evento cria um conflito com outro já aceite, então esses outros eventos são rejeitados e são impressos linha a linha cada evento cancelado no seguinte formato:
	"<other event name> promoted by <criador> was rejected."

B) Se o evento entrar em conflito com um evento que o utilizador staff criou, então esse outro evento é cancelado pois o criador não pode participar e é impresso:
	"<other event name> promoted by <conta a convidar> was removed."


2. Em qualquer outro caso imprime:
	"<guest name> was invited."




Erros:

1. as contas nos argumentos não existem -> "Account <non-existing account name> does not exist."
2. o evento com <event name> não existe em <account name> -> "<event name> does not exist in account <account name>."
3. a conta convidada já foi convidada para o evento <event name> -> "<account invitee> was already invited."
4. a conta convidada já aceitou o convite de outro evento ao mesmo tempo -> "<account invitee> is already attending another event."







## response

O utilizador responde a um convite para evento

Argumentos: <invitee account name> <criador> <event name> <response>

response -> accept/reject


Se bem sucedido
	"Account <invitee account name> has replied <response> to the invitation."

se o convite foi aceite então deverá ser impresso todos os convites rejeitados automaticamente, ordenados pela ordem de convites recebida com o formato:
	"<other event name> promoted by <criador> was rejected."


Erros:
1. alguma das contas nao existe -> "Account <non-existing account name> does not exist."
2. o resposta é desconhecida -> "Unknown event response."
3. o evento com <event name> não existe em <account name> -> "<event name> does not exist in account <account name>."
4. <account invitee> não está na lista de convidados do evento -> "Account <account invitee> is not on the invitation list."
5. <account invitee> já respondeu ao convite -> "Account <account invitee> has already responded."









## event

Mostra informação detalhada do evento

Argumentos: <criador> <event name>

se bem sucedido imprime a seguinte linha e por baixo linha a linha a lista dos convidados por ordem de convite e o status do convite
	"<event name> occurs on <event date and time>:
	<invited account> [<response>]
	<invited account> [<response>]
	<invited account> [<response>]"


Erros:
1. <account name> nao existe -> "Account <account name> does not exist."
2. <event name> nao existe em <account name> -> "<event name> does not exist in account <account name>."






## topics

Mostra todos os eventos que cobrem uma lista de tópicos

Argumentos: <list of topics>

é sempre bem sucedido

se não houver eventos com estes tópicos:
	"No events on those topics."


caso contrário:
	"Events on topics <list of topics>:
	<other event name> promoted by <criador> on <list of topics>"

a listagem deve ser feita pelo numero de topicos em comum (decrescente) em caso de empate por ordem alfabetica



	


